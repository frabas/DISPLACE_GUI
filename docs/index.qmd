# Introduction {.unnumbered}

DISPLACE is an agent-based, spatially explicit bioeconomic modeling framework that represents individual fishing vessels as agents whose behavior is influenced by historical fishing behavior and spatial resource availability. The model captures how vessels adjust their fishing activity (i.e., when, where, what, and how to fish) in response to spatial, temporal, management, and economic constraints. The spatial domain of the model is represented by a network of nodes, where the extent is based on historical fishing locations. The model integrates three main modules (i.e., biological, fleet, and economic), which can be customized based on data availability. DISPLACE relies on fisheries-dependent data such as Vessel Monitoring Systems (VMS) and landing receipts to guide spatial fishing patterns, catch, and effort, resulting in realistic simulations of fishing behavior. The biological module includes species-specific life history traits and population dynamics, while the fleet and economic modules include vessel-specific characteristics (e.g., size, gear, fuel capacity) and economic parameters (e.g., fuel prices, ex-vessel values, labor costs). DISPLACE has the ability to model the redistribution of fishing effort at various disaggregated levels—from individual vessels to individual ports or individual gears— allowing for the assessment of distributional impacts of OSW development (@bastardie2014displace).

UCSB used DISPLACE to evaluate the potential impacts of California’s Offshore Wind energy development lease areas on the DTS fisheries operating off the coast of California. This notebook summarizes the requirements, inputs, outputs, and processes for running DISPLACE and the associated R routines. Separate documentation about DISPLACE can be found on the [project website](https://displace-project.org/blog/).

This repository includes an application example based on this Californian study. It does not use actual vessel or fisheries data, but rather example data that do not reflect any confidential fishing information. This allows for a complete test run of the parametrization and model, and provides an opportunity to become familiar with the processes and different model components.

## Working environment

The current project uses DISPLACE version 1.3.5 on Windows 11. You can download the installer [here](https://displace-project.org/blog/download/). The R routines run on R version 4.5.0 (on any platform or operating system). All required R packages are detailed in `r/config.R`.

The [repository](https://github.com/emlab-ucsb/DISPLACE_California) contains all the scripts required to prepare input data in the DISPLACE format, along with scripts for basic processing of outputs in the `r` and `routines` folders. It also includes example data in the `raw_inputs` folder, which serve as reference for data contents and structure when building a DISPLACE application.  

The `processed_inputs` folder is initially empty and is automatically populated when running the routines with `r/functions_routines.R`. To explore DISPLACE results, you will need to manually move the model output files into the `outputs` folder so they can be read by `r/functions_outputs.R`.

```
DISPLACE_California
  |__ docs
  |__ qmd
  |__ raw_inputs
  |__ processed_inputs
  |__ outputs
  |__ routines
  |__ r
```

## Quick Setup & Run 

For a quick execution and model run to test whether it can run on your machine, execute:  

```{r, echo = TRUE, eval = FALSE}
source(here::here("r/functions_routines.R"))
```

Before executing, make sure to update the installer directory in the `directory` parameter of the `generate_dis_run_files` function in `functions_routines.R`. Running this script will populate the `processed_inputs` folder, whose contents then need to be moved to the machine where DISPLACE is run. This must be a Windows machine, and the inputs must be located in `C:/`. You should also create a folder named `DISPLACE_outputs` in `C:/`, where the outputs will be stored.  

We recommend reviewing the entire repository to understand the inputs and processes in more detail before executing.
